-- Supabase E-Shop Pro Schema
-- This script sets up the entire database structure, security policies, and storage.
-- It creates a clean, empty database ready for production use.

-- 1. Enable UUID extension (if not already enabled)
create extension if not exists "uuid-ossp";

-- 2. Create Storage Bucket for Images
-- Make sure to set this bucket to be PUBLIC in your Supabase dashboard Storage settings.
insert into storage.buckets (id, name, public)
values ('images', 'images', true)
on conflict (id) do nothing;

-- 3. Profiles Table (for public user data, linked to auth.users)
create table public.profiles (
  id uuid not null primary key references auth.users on delete cascade,
  name text,
  phone text,
  country text,
  is_admin boolean default false
);
-- Allow users to read their own profile
alter table public.profiles enable row level security;
create policy "Users can view their own profile." on public.profiles for select using (auth.uid() = id);
create policy "Users can update their own profile." on public.profiles for update using (auth.uid() = id);

-- Function to create a profile when a new user signs up
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, name, phone, country, is_admin)
  values (new.id, new.raw_user_meta_data->>'name', new.raw_user_meta_data->>'phone', new.raw_user_meta_data->>'country', false);
  return new;
end;
$$ language plpgsql security definer;

-- Trigger to call the function on new user creation
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- 4. Products Table
create table public.products (
  id bigint generated by default as identity primary key,
  created_at timestamptz default now(),
  name text not null,
  price numeric not null,
  sale_price numeric,
  description text,
  image_url text,
  categories text[],
  stock integer not null
);
-- Allow public read access to products
alter table public.products enable row level security;
create policy "Products are publicly viewable." on public.products for select to public using (true);
create policy "Admins can manage products." on public.products for all using (
  (select is_admin from public.profiles where id = auth.uid()) = true
);

-- 5. Categories Table
create table public.categories (
  id bigint generated by default as identity primary key,
  name text not null unique
);
-- Allow public read access to categories
alter table public.categories enable row level security;
create policy "Categories are publicly viewable." on public.categories for select to public using (true);
create policy "Admins can manage categories." on public.categories for all using (
  (select is_admin from public.profiles where id = auth.uid()) = true
);


-- 6. Promotions Table
create table public.promotions (
  id bigint generated by default as identity primary key,
  title text not null,
  description text,
  image_url text,
  is_active boolean default false,
  discount_percentage numeric,
  target_category text,
  cta_text text,
  cta_link text
);
-- Allow public read access
alter table public.promotions enable row level security;
create policy "Promotions are publicly viewable." on public.promotions for select to public using (true);
create policy "Admins can manage promotions." on public.promotions for all using (
  (select is_admin from public.profiles where id = auth.uid()) = true
);


-- 7. Orders & Order Items
create table public.orders (
  id bigint generated by default as identity primary key,
  created_at timestamptz default now(),
  user_id uuid not null references public.profiles,
  total numeric not null,
  status text not null default 'Processing' -- Processing, Shipped, Delivered
);
create table public.order_items (
  id bigint generated by default as identity primary key,
  order_id bigint not null references public.orders,
  product_id bigint not null references public.products on delete restrict, -- Prevent product deletion if in an order
  quantity integer not null,
  price_at_purchase numeric not null,
  status text not null default 'Processing' -- Processing, Shipped, Delivered, Cancelled
);
-- Policies for Orders and Items
alter table public.orders enable row level security;
create policy "Users can view their own orders." on public.orders for select using (auth.uid() = user_id);
create policy "Users can create orders for themselves." on public.orders for insert with check (auth.uid() = user_id);
create policy "Admins can view all orders." on public.orders for select using ((select is_admin from public.profiles where id = auth.uid()) = true);
create policy "Admins can update order status." on public.orders for update using ((select is_admin from public.profiles where id = auth.uid()) = true);

alter table public.order_items enable row level security;
create policy "Users can view items in their own orders." on public.order_items for select using (
  exists (select 1 from orders where orders.id = order_items.order_id and orders.user_id = auth.uid())
);
create policy "Users can create order items for themselves." on public.order_items for insert with check (
  exists (select 1 from orders where orders.id = order_items.order_id and orders.user_id = auth.uid())
);
create policy "Admins can view all order items." on public.order_items for select using ((select is_admin from public.profiles where id = auth.uid()) = true);
create policy "Admins can update order item status." on public.order_items for update using ((select is_admin from public.profiles where id = auth.uid()) = true);


-- 8. Wishlist Table (Junction Table)
create table public.wishlist_items (
  user_id uuid not null references public.profiles,
  product_id bigint not null references public.products on delete cascade,
  created_at timestamptz default now(),
  primary key (user_id, product_id)
);
-- Policies for Wishlist
alter table public.wishlist_items enable row level security;
create policy "Users can manage their own wishlist." on public.wishlist_items for all using (auth.uid() = user_id);

-- 9. Cart Table (Junction Table)
create table public.cart_items (
  user_id uuid not null references public.profiles,
  product_id bigint not null references public.products on delete cascade,
  quantity integer not null,
  created_at timestamptz default now(),
  primary key (user_id, product_id)
);
-- Policies for Cart
alter table public.cart_items enable row level security;
create policy "Users can manage their own cart." on public.cart_items for all using (auth.uid() = user_id);


-- 10. Reviews Table
create table public.reviews (
  id bigint generated by default as identity primary key,
  product_id bigint not null references public.products on delete cascade,
  user_id uuid not null references public.profiles,
  rating integer not null check (rating >= 1 and rating <= 5),
  review_text text,
  created_at timestamptz default now()
);
-- Policies for Reviews
alter table public.reviews enable row level security;
create policy "Reviews are publicly viewable." on public.reviews for select to public using (true);
create policy "Users can manage their own reviews." on public.reviews for all using (auth.uid() = user_id);


-- 11. Team Members Table
create table public.team_members (
  id bigint generated by default as identity primary key,
  name text,
  title text,
  image_url text
);
-- Allow public read access
alter table public.team_members enable row level security;
create policy "Team members are publicly viewable." on public.team_members for select to public using (true);
create policy "Admins can manage team members." on public.team_members for all using (
  (select is_admin from public.profiles where id = auth.uid()) = true
);

-- 12. Site Content Table (Single Row Table)
create table public.site_content (
  id int primary key default 1,
  site_name text,
  hero_title text,
  hero_subtitle text,
  contact_address text,
  contact_email text,
  contact_phone text,
  sender_email text,
  social_instagram text,
  social_tiktok text,
  social_facebook text,
  social_whatsapp text,
  social_twitter text,
  about_title text,
  about_subtitle text,
  about_story_title text,
  about_story_content text,
  about_story_image_url text,
  about_team_title text,
  sales_banner_title text,
  sales_banner_subtitle text,
  sales_banner_end_date timestamptz,
  sales_banner_is_active boolean,
  theme_primary text,
  theme_secondary text,
  theme_accent text,
  email_verification_title text,
  email_verification_body text,
  constraint single_row_check check (id = 1)
);
-- Policies for Site Content
alter table public.site_content enable row level security;
create policy "Site content is publicly viewable." on public.site_content for select to public using (true);
create policy "Admins can manage site content." on public.site_content for all using (
  (select is_admin from public.profiles where id = auth.uid()) = true
);


-- 13. RLS Policies for Storage
-- Allow public read access to all images
create policy "Public can view images" on storage.objects for select using ( bucket_id = 'images' );

-- Allow admins to upload, update, and delete images
create policy "Admins can manage images" on storage.objects for all using (
  bucket_id = 'images' AND (select is_admin from public.profiles where id = auth.uid()) = true
);


-- 14. INSERT Initial Data
-- Insert a single default row for site content to ensure the admin panel works.
-- This prevents the app from crashing on a fresh database.
INSERT INTO public.site_content (
    id, 
    site_name, 
    hero_title, 
    hero_subtitle, 
    contact_address, 
    contact_email, 
    contact_phone,
    sender_email,
    about_title,
    about_subtitle,
    about_story_title,
    about_team_title,
    theme_primary,
    theme_secondary,
    theme_accent,
    email_verification_title,
    email_verification_body,
    social_facebook,
    social_whatsapp,
    social_twitter
) VALUES (
    1, 
    'E-Shop Pro', 
    'Your Store Title', 
    'Your Store Subtitle',
    '123 Main Street, Lagos, Nigeria',
    'contact@eshopro.com',
    '+234 000 000 0000',
    'notifications@eshopro.com',
    'About Us',
    'This is where you can talk about your store.',
    'Our Story',
    'Meet the Team',
    '#1a237e',
    '#ffab40',
    '#f50057',
    'Verify Your Email Address',
    'Thanks for signing up for E-Shop Pro! Please click the button below to confirm your email and complete your registration. If you didn''t create an account, you can safely ignore this email.',
    null,
    null,
    null
);