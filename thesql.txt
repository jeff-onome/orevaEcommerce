-- Supabase E-Shop Pro Schema
-- This script sets up the entire database structure, security policies, and storage.
-- It is idempotent and can be run multiple times safely.

-- 1. Enable UUID extension
create extension if not exists "uuid-ossp";

-- 2. Create Storage Bucket for Images
-- Make sure to set this bucket to be PUBLIC in your Supabase dashboard Storage settings.
insert into storage.buckets (id, name, public)
values ('images', 'images', true)
on conflict (id) do nothing;

-- 3. Profiles Table
create table if not exists public.profiles (
  id uuid not null primary key references auth.users on delete cascade,
  email text,
  name text,
  phone text,
  country text,
  is_admin boolean default false
);

-- SECURE Admin Check Function
-- SECURITY DEFINER is used to bypass RLS.
-- set search_path = '' is a security best practice.
create or replace function public.is_current_user_admin()
returns boolean
language sql
security definer
set search_path = ''
stable
as $$
  select exists (select 1 from public.profiles where id = auth.uid() and is_admin = true);
$$;

-- RLS for Profiles
alter table public.profiles enable row level security;
drop policy if exists "Users can view their own profile." on public.profiles;
create policy "Users can view their own profile." on public.profiles for select to authenticated using (auth.uid() = id);
drop policy if exists "Users can update their own profile." on public.profiles;
create policy "Users can update their own profile." on public.profiles for update to authenticated using (auth.uid() = id) with check (auth.uid() = id);
drop policy if exists "Admins can view all profiles." on public.profiles;
create policy "Admins can view all profiles." on public.profiles for select to authenticated using (public.is_current_user_admin());

-- Handle New User Function & Trigger
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, email, name, phone, country, is_admin)
  values (new.id, new.email, new.raw_user_meta_data->>'name', new.raw_user_meta_data->>'phone', new.raw_user_meta_data->>'country', false);
  return new;
end;
$$ language plpgsql security definer;

drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- 4. Products Table
create table if not exists public.products (
  id bigint generated by default as identity primary key,
  created_at timestamptz default now(),
  name text not null,
  price numeric not null,
  sale_price numeric,
  description text,
  image_url text,
  categories text[],
  stock integer not null,
  avg_rating numeric default 0,
  review_count integer default 0
);

-- Force a schema cache refresh by adding a comment to a column. This is a safe, non-destructive operation.
-- This comment is updated to ensure the schema cache is invalidated and reloaded.
COMMENT ON COLUMN public.products.name IS 'The official name for the product.';

-- RLS for Products
alter table public.products enable row level security;
drop policy if exists "Products are publicly viewable." on public.products;
create policy "Products are publicly viewable." on public.products for select to anon, authenticated using (true);
drop policy if exists "Admins can manage products." on public.products;
create policy "Admins can manage products." on public.products for all to authenticated using (public.is_current_user_admin()) with check (public.is_current_user_admin());

-- 5. Categories Table
create table if not exists public.categories (
  id bigint generated by default as identity primary key,
  name text not null unique,
  image_url text,
  is_highlighted boolean default false,
  display_order integer default 99
);

-- RLS for Categories
alter table public.categories enable row level security;
drop policy if exists "Categories are publicly viewable." on public.categories;
create policy "Categories are publicly viewable." on public.categories for select to anon, authenticated using (true);
drop policy if exists "Admins can manage categories." on public.categories;
create policy "Admins can manage categories." on public.categories for all to authenticated using (public.is_current_user_admin()) with check (public.is_current_user_admin());


-- 6. Promotions Table
create table if not exists public.promotions (
  id bigint generated by default as identity primary key,
  title text not null,
  description text,
  image_url text,
  is_active boolean default false,
  discount_percentage numeric,
  target_category text,
  cta_text text,
  cta_link text
);

-- RLS for Promotions
alter table public.promotions enable row level security;
drop policy if exists "Promotions are publicly viewable." on public.promotions;
create policy "Promotions are publicly viewable." on public.promotions for select to anon, authenticated using (true);
drop policy if exists "Admins can manage promotions." on public.promotions;
create policy "Admins can manage promotions." on public.promotions for all to authenticated using (public.is_current_user_admin()) with check (public.is_current_user_admin());

-- 7. Orders & Order Items Tables
create table if not exists public.orders (
  id bigint generated by default as identity primary key,
  created_at timestamptz default now(),
  user_id uuid not null references public.profiles,
  total numeric not null,
  status text not null default 'Pending',
  shipping_address_line1 text,
  shipping_address_city text,
  shipping_address_zip text,
  shipping_address_country text,
  payment_method text
);
create table if not exists public.order_items (
  id bigint generated by default as identity primary key,
  order_id bigint not null references public.orders,
  product_id bigint not null references public.products on delete restrict,
  quantity integer not null,
  price_at_purchase numeric not null,
  status text not null default 'Pending'
);

-- RLS for Orders
alter table public.orders enable row level security;
drop policy if exists "Users can view their own orders." on public.orders;
create policy "Users can view their own orders." on public.orders for select to authenticated using (auth.uid() = user_id);
drop policy if exists "Users can create orders for themselves." on public.orders;
create policy "Users can create orders for themselves." on public.orders for insert to authenticated with check (auth.uid() = user_id);
drop policy if exists "Admins can view all orders." on public.orders;
create policy "Admins can view all orders." on public.orders for select to authenticated using (public.is_current_user_admin());
drop policy if exists "Admins can update order status." on public.orders;
create policy "Admins can update order status." on public.orders for update to authenticated using (public.is_current_user_admin()) with check (public.is_current_user_admin());

-- RLS for Order Items
alter table public.order_items enable row level security;
drop policy if exists "Users can view items in their own orders." on public.order_items;
create policy "Users can view items in their own orders." on public.order_items for select to authenticated using (
  exists (select 1 from orders where orders.id = order_items.order_id and orders.user_id = auth.uid())
);
drop policy if exists "Users can create order items for themselves." on public.order_items;
create policy "Users can create order items for themselves." on public.order_items for insert to authenticated with check (
  exists (select 1 from orders where orders.id = order_items.order_id and orders.user_id = auth.uid())
);
drop policy if exists "Admins can view all order items." on public.order_items;
create policy "Admins can view all order items." on public.order_items for select to authenticated using (public.is_current_user_admin());
drop policy if exists "Admins can update order item status." on public.order_items;
create policy "Admins can update order item status." on public.order_items for update to authenticated using (public.is_current_user_admin()) with check (public.is_current_user_admin());


-- 8. Wishlist Table
create table if not exists public.wishlist_items (
  user_id uuid not null references public.profiles,
  product_id bigint not null references public.products on delete cascade,
  created_at timestamptz default now(),
  primary key (user_id, product_id)
);
-- RLS for Wishlist
alter table public.wishlist_items enable row level security;
drop policy if exists "Users can manage their own wishlist." on public.wishlist_items;
create policy "Users can manage their own wishlist." on public.wishlist_items for all to authenticated using (auth.uid() = user_id) with check (auth.uid() = user_id);

-- 9. Cart Table
create table if not exists public.cart_items (
  user_id uuid not null references public.profiles,
  product_id bigint not null references public.products on delete cascade,
  quantity integer not null,
  created_at timestamptz default now(),
  primary key (user_id, product_id)
);
-- RLS for Cart
alter table public.cart_items enable row level security;
drop policy if exists "Users can manage their own cart." on public.cart_items;
create policy "Users can manage their own cart." on public.cart_items for all to authenticated using (auth.uid() = user_id) with check (auth.uid() = user_id);


-- 10. Reviews Table
create table if not exists public.reviews (
  id bigint generated by default as identity primary key,
  product_id bigint not null references public.products on delete cascade,
  user_id uuid not null references public.profiles,
  rating integer not null check (rating >= 1 and rating <= 5),
  review_text text,
  created_at timestamptz default now()
);
-- Add unique constraint to prevent duplicate reviews
alter table public.reviews add constraint reviews_user_id_product_id_key unique (user_id, product_id);

-- RLS for Reviews
alter table public.reviews enable row level security;
drop policy if exists "Reviews are publicly viewable." on public.reviews;
create policy "Reviews are publicly viewable." on public.reviews for select to anon, authenticated using (true);
drop policy if exists "Users can manage their own reviews." on public.reviews;
create policy "Users can manage their own reviews." on public.reviews for all to authenticated using (auth.uid() = user_id) with check (auth.uid() = user_id);


-- 11. Team Members Table
create table if not exists public.team_members (
  id bigint generated by default as identity primary key,
  name text,
  title text,
  image_url text
);
-- RLS for Team Members
alter table public.team_members enable row level security;
drop policy if exists "Team members are publicly viewable." on public.team_members;
create policy "Team members are publicly viewable." on public.team_members for select to anon, authenticated using (true);
drop policy if exists "Admins can manage team members." on public.team_members;
create policy "Admins can manage team members." on public.team_members for all to authenticated using (public.is_current_user_admin()) with check (public.is_current_user_admin());

-- 12. Site Content Table
create table if not exists public.site_content (
  id int primary key default 1,
  site_name text,
  hero_title text,
  hero_subtitle text,
  contact_address text,
  contact_email text,
  contact_phone text,
  sender_email text,
  social_instagram text,
  social_tiktok text,
  social_facebook text,
  social_whatsapp text,
  social_twitter text,
  about_title text,
  about_subtitle text,
  about_story_title text,
  about_story_content text,
  about_story_image_url text,
  about_team_title text,
  sales_banner_title text,
  sales_banner_subtitle text,
  sales_banner_end_date timestamptz,
  sales_banner_is_active boolean,
  theme_primary text,
  theme_secondary text,
  theme_accent text,
  email_verification_title text,
  email_verification_body text,
  privacy_policy_content text,
  terms_of_service_content text,
  constraint single_row_check check (id = 1)
);
-- RLS for Site Content
alter table public.site_content enable row level security;
drop policy if exists "Site content is publicly viewable." on public.site_content;
create policy "Site content is publicly viewable." on public.site_content for select to anon, authenticated using (true);
drop policy if exists "Admins can manage site content." on public.site_content;
create policy "Admins can manage site content." on public.site_content for all to authenticated using (public.is_current_user_admin()) with check (public.is_current_user_admin());


-- 13. RLS Policies for Storage
drop policy if exists "Public can view images" on storage.objects;
create policy "Public can view images" on storage.objects for select using ( bucket_id = 'images' );

drop policy if exists "Admins can manage images" on storage.objects;
create policy "Admins can manage images" on storage.objects for all to authenticated using ( bucket_id = 'images' AND public.is_current_user_admin() ) with check ( bucket_id = 'images' AND public.is_current_user_admin() );


-- 14. NEW/UPDATED Stored Procedures & Triggers

-- Procedure to update categories efficiently
create or replace function public.update_category_and_products(
  p_category_id bigint,
  p_new_name text
)
returns void
language plpgsql
security definer
set search_path = ''
as $$
declare
  old_name text;
begin
  -- Get the old name before updating
  select name into old_name from public.categories where id = p_category_id;

  -- Update the category name only if the new name is different
  if old_name <> p_new_name then
    update public.categories set name = p_new_name where id = p_category_id;

    -- Update all products that reference the old category name
    update public.products
    set categories = array_replace(categories, old_name, p_new_name)
    where categories @> array[old_name];
  end if;
end;
$$;

-- Function and Trigger to update product ratings automatically
create or replace function public.update_product_ratings()
returns trigger as $$
declare
  product_to_update_id bigint;
begin
  if (tg_op = 'DELETE') then
    product_to_update_id := old.product_id;
  else
    product_to_update_id := new.product_id;
  end if;

  update public.products
  set
    avg_rating = (
      select avg(rating) from public.reviews where product_id = product_to_update_id
    ),
    review_count = (
      select count(*) from public.reviews where product_id = product_to_update_id
    )
  where id = product_to_update_id;
  
  return coalesce(new, old);
end;
$$ language plpgsql security definer;

drop trigger if exists on_review_change on public.reviews;
create trigger on_review_change
  after insert or update or delete on public.reviews
  for each row execute procedure public.update_product_ratings();


-- 15. INSERT Initial Data
-- This is safe to run multiple times due to ON CONFLICT.
INSERT INTO public.site_content (
  id, site_name, hero_title, hero_subtitle, 
  contact_address, contact_email, contact_phone, sender_email, 
  social_instagram, social_tiktok,
  about_title, about_subtitle, about_story_title, about_story_content, about_story_image_url, about_team_title, 
  sales_banner_title, sales_banner_subtitle, sales_banner_end_date, sales_banner_is_active,
  theme_primary, theme_secondary, theme_accent,
  email_verification_title, email_verification_body,
  privacy_policy_content, terms_of_service_content
) 
VALUES (
  1, 'E-Shop Pro', 'Discover Your Next Favorite Thing', 'High-quality products, delivered to your doorstep.', 
  '123 Main Street, Lagos, Nigeria', 'contact@eshopro.com', '+234 000 000 0000', 'notifications@eshopro.com',
  'eshopro', 'eshopro',
  'Our Story', 'Redefining the online shopping experience with quality and care.', 'From a Small Idea to a Grand Vision', 'Our journey began with a simple goal: to make premium products accessible to everyone. We believe in quality, craftsmanship, and customer satisfaction above all else. Every item in our store is carefully selected and tested to meet our high standards.', 'https://picsum.photos/seed/about/800/600', 'Meet the Team',
  'Flash Sale!', 'Get up to 40% off on selected items.', '2099-12-31T23:59:59Z', true,
  '#1a237e', '#ffab40', '#f50057',
  'Verify Your Email Address', 'Thanks for signing up for E-Shop Pro! Please click the button below to confirm your email and complete your registration. If you didn''t create an account, you can safely ignore this email.',
  'Your privacy is important to us. This policy explains what information we collect and why.', 'By using our service, you agree to these terms. Please read them carefully.'
)
ON CONFLICT (id) DO UPDATE SET
  site_name = EXCLUDED.site_name,
  hero_title = EXCLUDED.hero_title,
  hero_subtitle = EXCLUDED.hero_subtitle,
  contact_address = EXCLUDED.contact_address,
  contact_email = EXCLUDED.contact_email,
  contact_phone = EXCLUDED.contact_phone,
  sender_email = EXCLUDED.sender_email,
  social_instagram = EXCLUDED.social_instagram,
  social_tiktok = EXCLUDED.social_tiktok,
  about_title = EXCLUDED.about_title,
  about_subtitle = EXCLUDED.about_subtitle,
  about_story_title = EXCLUDED.about_story_title,
  about_story_content = EXCLUDED.about_story_content,
  about_story_image_url = EXCLUDED.about_story_image_url,
  about_team_title = EXCLUDED.about_team_title,
  sales_banner_title = EXCLUDED.sales_banner_title,
  sales_banner_subtitle = EXCLUDED.sales_banner_subtitle,
  sales_banner_end_date = EXCLUDED.sales_banner_end_date,
  sales_banner_is_active = EXCLUDED.sales_banner_is_active,
  theme_primary = EXCLUDED.theme_primary,
  theme_secondary = EXCLUDED.theme_secondary,
  theme_accent = EXCLUDED.theme_accent,
  email_verification_title = EXCLUDED.email_verification_title,
  email_verification_body = EXCLUDED.email_verification_body,
  privacy_policy_content = EXCLUDED.privacy_policy_content,
  terms_of_service_content = EXCLUDED.terms_of_service_content;