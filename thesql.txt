-- Supabase E-Shop Pro Schema
-- This script sets up the entire database structure, security policies, and storage.
-- It also inserts the initial mock data to populate the site.

-- 1. Enable UUID extension (if not already enabled)
create extension if not exists "uuid-ossp";

-- 2. Create Storage Bucket for Images
-- Make sure to set this bucket to be PUBLIC in your Supabase dashboard Storage settings.
insert into storage.buckets (id, name, public)
values ('images', 'images', true)
on conflict (id) do nothing;

-- 3. Profiles Table & Auth Functions
create table public.profiles (
  id uuid not null primary key references auth.users on delete cascade,
  email text,
  name text,
  phone text,
  country text,
  is_admin boolean default false,
  is_suspended boolean default false
);

-- Helper function to check if the current user is an admin
-- This function must be defined BEFORE policies that use it.
-- SECURITY DEFINER allows it to bypass RLS policies on the profiles table.
create or replace function public.is_current_user_admin()
returns boolean
language sql
security definer
set search_path = public
as $$
  select coalesce(
    (select is_admin from profiles where id = auth.uid()),
    false
  );
$$;

-- RPC function for deleting users (requires elevated privileges on Supabase)
-- This function must be run by a role that has permission to delete from auth.users.
-- A secure approach is to use an Edge Function with the service_role key.
create or replace function public.delete_user(user_id uuid)
returns void
language plpgsql
security definer
as $$
begin
  if is_current_user_admin() then
    delete from auth.users where id = user_id;
  else
    raise exception 'Permission denied: You must be an admin to delete users.';
  end if;
end;
$$;

-- RLS Policies for Profiles
alter table public.profiles enable row level security;
create policy "Users can view their own profile." on public.profiles for select using (auth.uid() = id);
create policy "Users can update their own profile." on public.profiles for update using (auth.uid() = id);
create policy "Admins can manage all profiles." on public.profiles for all using (is_current_user_admin());

-- Function to create a profile when a new user signs up
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, email, name, phone, country, is_admin, is_suspended)
  values (new.id, new.email, new.raw_user_meta_data->>'name', new.raw_user_meta_data->>'phone', new.raw_user_meta_data->>'country', false, false);
  return new;
end;
$$ language plpgsql security definer;

-- Trigger to call the function on new user creation
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- 4. Products Table
create table public.products (
  id bigint generated by default as identity primary key,
  created_at timestamptz default now(),
  name text not null,
  price numeric not null,
  sale_price numeric,
  description text,
  image_url text,
  categories text[],
  stock integer not null
);
-- Allow public read access to products
alter table public.products enable row level security;
create policy "Products are publicly viewable." on public.products for select using (true);
create policy "Admins can manage products." on public.products for all using (is_current_user_admin());

-- 5. Categories Table
create table public.categories (
  id bigint generated by default as identity primary key,
  name text not null unique
);
-- Allow public read access to categories
alter table public.categories enable row level security;
create policy "Categories are publicly viewable." on public.categories for select using (true);
create policy "Admins can manage categories." on public.categories for all using (is_current_user_admin());


-- 6. Promotions Table
create table public.promotions (
  id bigint generated by default as identity primary key,
  title text not null,
  description text,
  image_url text,
  is_active boolean default false,
  discount_percentage numeric,
  target_category text,
  cta_text text,
  cta_link text
);
-- Allow public read access
alter table public.promotions enable row level security;
create policy "Promotions are publicly viewable." on public.promotions for select using (true);
create policy "Admins can manage promotions." on public.promotions for all using (is_current_user_admin());


-- 7. Orders & Order Items
create table public.orders (
  id bigint generated by default as identity primary key,
  created_at timestamptz default now(),
  user_id uuid not null references public.profiles,
  total numeric not null,
  status text not null default 'Processing' -- Processing, Shipped, Delivered
);
create table public.order_items (
  id bigint generated by default as identity primary key,
  order_id bigint not null references public.orders,
  product_id bigint not null references public.products,
  quantity integer not null,
  price_at_purchase numeric not null,
  status text not null default 'Processing' -- Processing, Shipped, Delivered, Cancelled
);
-- Policies for Orders and Items
alter table public.orders enable row level security;
create policy "Users can view their own orders." on public.orders for select using (auth.uid() = user_id);
create policy "Users can create orders for themselves." on public.orders for insert with check (auth.uid() = user_id);
create policy "Admins can view all orders." on public.orders for select using (is_current_user_admin());
create policy "Admins can update order status." on public.orders for update using (is_current_user_admin());

alter table public.order_items enable row level security;
create policy "Users can view items in their own orders." on public.order_items for select using (
  exists (select 1 from orders where orders.id = order_items.order_id and orders.user_id = auth.uid())
);
create policy "Users can create order items for themselves." on public.order_items for insert with check (
  exists (select 1 from orders where orders.id = order_items.order_id and orders.user_id = auth.uid())
);
create policy "Admins can view all order items." on public.order_items for select using (is_current_user_admin());
create policy "Admins can update order item status." on public.order_items for update using (is_current_user_admin());


-- 8. Wishlist Table (Junction Table)
create table public.wishlist_items (
  user_id uuid not null references public.profiles,
  product_id bigint not null references public.products,
  created_at timestamptz default now(),
  primary key (user_id, product_id)
);
-- Policies for Wishlist
alter table public.wishlist_items enable row level security;
create policy "Users can manage their own wishlist." on public.wishlist_items for all using (auth.uid() = user_id);

-- 9. Cart Table (Junction Table)
create table public.cart_items (
  user_id uuid not null references public.profiles,
  product_id bigint not null references public.products,
  quantity integer not null,
  created_at timestamptz default now(),
  primary key (user_id, product_id)
);
-- Policies for Cart
alter table public.cart_items enable row level security;
create policy "Users can manage their own cart." on public.cart_items for all using (auth.uid() = user_id);


-- 10. Reviews Table
create table public.reviews (
  id bigint generated by default as identity primary key,
  product_id bigint not null references public.products,
  user_id uuid not null references public.profiles,
  rating integer not null check (rating >= 1 and rating <= 5),
  review_text text,
  created_at timestamptz default now()
);
-- Policies for Reviews
alter table public.reviews enable row level security;
create policy "Reviews are publicly viewable." on public.reviews for select using (true);
create policy "Users can manage their own reviews." on public.reviews for all using (auth.uid() = user_id);


-- 11. Team Members Table
create table public.team_members (
  id bigint generated by default as identity primary key,
  name text,
  title text,
  image_url text
);
-- Allow public read access
alter table public.team_members enable row level security;
create policy "Team members are publicly viewable." on public.team_members for select using (true);
create policy "Admins can manage team members." on public.team_members for all using (is_current_user_admin());

-- 12. Site Content Table (Single Row Table)
create table public.site_content (
  id int primary key default 1,
  site_name text,
  hero_title text,
  hero_subtitle text,
  contact_title text,
  contact_subtitle text,
  contact_address text,
  contact_email text,
  contact_phone text,
  social_instagram text,
  social_tiktok text,
  about_title text,
  about_subtitle text,
  about_story_title text,
  about_story_content text,
  about_story_image_url text,
  about_team_title text,
  services_title text,
  services_subtitle text,
  sales_banner_title text,
  sales_banner_subtitle text,
  sales_banner_end_date timestamptz,
  sales_banner_is_active boolean,
  theme_primary text,
  theme_secondary text,
  theme_accent text,
  constraint single_row_check check (id = 1)
);
-- Policies for Site Content
alter table public.site_content enable row level security;
create policy "Site content is publicly viewable." on public.site_content for select using (true);
create policy "Admins can manage site content." on public.site_content for all using (is_current_user_admin());

-- 13. Services Table
create table public.services (
  id bigint generated by default as identity primary key,
  title text not null,
  description text,
  icon_name text,
  is_active boolean default true
);
-- Policies for Services
alter table public.services enable row level security;
create policy "Services are publicly viewable." on public.services for select using (true);
create policy "Admins can manage services." on public.services for all using (is_current_user_admin());

-- 14. Pages Table (for Privacy Policy, etc.)
create table public.pages (
  id bigint generated by default as identity primary key,
  slug text not null unique,
  title text not null,
  content text,
  updated_at timestamptz default now()
);
-- Policies for Pages
alter table public.pages enable row level security;
create policy "Pages are publicly viewable." on public.pages for select using (true);
create policy "Admins can manage pages." on public.pages for all using (is_current_user_admin());
-- Function to update the updated_at column
create or replace function public.update_updated_at_column()
returns trigger as $$
begin
   new.updated_at = now(); 
   return new;
end;
$$ language 'plpgsql';
-- Trigger for pages table
create trigger handle_pages_update before update on public.pages
  for each row execute procedure public.update_updated_at_column();


-- 15. INSERT Initial Data
-- This section provides essential starter data for the application to function.

-- Insert Pages (Legal placeholders)
insert into public.pages (slug, title, content) values
('privacy-policy', 'Privacy Policy', 'This is the placeholder for your Privacy Policy. Please replace this text with your own policy content. You can edit this from the admin dashboard under the "Pages" tab.'),
('terms-of-service', 'Terms of Service', 'This is the placeholder for your Terms of Service. Please replace this text with your own terms. You can edit this from the admin dashboard under the "Pages" tab.');

-- Insert Site Content (minimal for app functionality)
insert into public.site_content (
  id, site_name, theme_primary, theme_secondary, theme_accent,
  hero_title, hero_subtitle,
  contact_title, contact_subtitle, contact_address, contact_email, contact_phone,
  about_title, about_subtitle, about_team_title,
  services_title, services_subtitle,
  sales_banner_is_active
) values (
  1, 'E-Shop Pro', '#1a237e', '#ffab40', '#f50057',
  'Your Store, Your Style', 'Start building your dream e-commerce site.',
  'Contact Us', 'Get in touch with us.', '123 Main Street', 'contact@example.com', '555-1234',
  'About Us', 'Tell your story here.', 'Meet the Team',
  'Our Services', 'Describe the services you offer.',
  false
);

-- Note: User data is handled by Supabase Auth. You will need to create users through the sign-up form.
-- To create an admin user:
-- 1. Sign up a new user through the app's sign-up form.
-- 2. Go to the 'profiles' table in your Supabase Table Editor.
-- 3. Find the new user's row and set the 'is_admin' column to TRUE.
--
-- This user can then log in with 'admin@example.com' / 'admin123' (or whatever you signed up with)
-- and access the admin panel, as long as you update the `is_admin` flag.
